using API.Middleware;
using Application.Employee;
using Application.Interfaces;
using Application.User;
using AutoMapper;
using Domain;
using Email;
using FluentValidation.AspNetCore;
using Infrastructure.Photos;
using Infrastructure.RazorViewToString;
using Infrastructure.Security;
using Infrastructure.Security.Authorization;
using MediatR;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc.Authorization;
using Microsoft.AspNetCore.SpaServices.ReactDevelopmentServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.IdentityModel.Tokens;
using Persistence;
using System;
using System.IO;
using System.Reflection;
using System.Text;

namespace API
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        // use this method fro the dependency injection container
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddSwaggerGen(options =>
            {
                options.SwaggerDoc("v1", new Microsoft.OpenApi.Models.OpenApiInfo
                {
                    Title = "Qlientel API",
                    Version = "v1",
                    Description = "CRM software system for SME",
                });

                //Locate the XML file being generated by ASP.NET...
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                //... and tell Swagger to use those XML comments.
                options.IncludeXmlComments(xmlPath);
                options.CustomSchemaIds(type => type.ToString());
            });


            // In production, the React files will be served from this directory
            //services.AddSpaStaticFiles(configuration =>
            //{
            //    configuration.RootPath = "../client-app/build";
            //});

            services.AddCors(opt =>
            {
                opt.AddPolicy("CorsPolicy", policy =>
                {
                    policy
                        .AllowAnyHeader()
                        .AllowAnyMethod()
                        .WithExposedHeaders("WWW-Authenticate")
                        .WithOrigins("http://localhost:3000")
                        .AllowCredentials();
                });
            });

            services.AddAuthorization(opt =>
            {
                opt.AddPolicy("IsAdmin", policy =>
                {
                    policy.Requirements.Add(new IsAdmin());
                });
                opt.AddPolicy("Manager", policy =>
                {
                    policy.Requirements.Add(new IsManager());
                });
            });

            services.AddAuthorization(options =>
            {
                options.AddPolicy("Founders", policy =>
                                  policy.RequireClaim("EmployeeNumber", "1", "2", "3", "4", "5"));

                options.AddPolicy("HRDepartment", policy =>
                                  policy.RequireClaim("HumanResources"));
            });

            services.AddDbContext<DataContext>(opt =>
                       {
                           opt.UseSqlServer(Configuration.GetConnectionString("DefaultConnection"));
                       });

         services.AddSignalR();
            services.AddDefaultIdentity<AppUser>(
                option => option.SignIn.RequireConfirmedAccount = false)
                                                        .AddRoles<IdentityRole>()
                                                        .AddEntityFrameworkStores<DataContext>();

            services.AddMediatR(typeof(Login.Handler).Assembly);

            services.AddAutoMapper(typeof(Get.Handler));

            services.AddControllers(opt =>
            {
                var policy = new AuthorizationPolicyBuilder().RequireAuthenticatedUser().Build();
                opt.Filters.Add(new AuthorizeFilter(policy));
            }).AddNewtonsoftJson(options =>
   options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
)
                .AddFluentValidation(cfg => { cfg.RegisterValidatorsFromAssemblyContaining<Register>(); });

            var builder = services.AddIdentityCore<AppUser>();
            var identityBuilder = new IdentityBuilder(builder.UserType, builder.Services);
            identityBuilder.AddEntityFrameworkStores<DataContext>();
            identityBuilder.AddSignInManager<SignInManager<AppUser>>();

            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration["TokenKey"]));
            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                .AddJwtBearer(opt =>
                {
                    opt.TokenValidationParameters = new TokenValidationParameters()
                    {
                        ValidateIssuerSigningKey = true,
                        IssuerSigningKey = key,
                        ValidateAudience = false, // url it is comming from
                        ValidateIssuer = false,
                        ValidateLifetime = true,
                        ClockSkew = TimeSpan.Zero
                    };
                });

            services.AddTransient<IAuthorizationHandler, IsAdminHandler>();
            services.AddTransient<IAuthorizationHandler, IsEmployeeHandler>();
            services.AddTransient<IAuthorizationHandler, IsManagerHandler>();
            services.AddScoped<IPhotoAccessor, PhotoAccessor>();
            services.AddScoped<IUserAccessor, UserAccessor>();
            services.AddScoped<Azure.Create>();
            services.AddScoped<IJwtGenerator, JwtGenerator>();
            services.Configure<SmtpSettings>(Configuration.GetSection("SmtpSettings"));
            services.AddSingleton<IMailer, Mailer>();
            services.AddTransient<IRazorViewToStringRenderer, RazorViewToStringRenderer>();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        // configure the http request pipeline
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            app.UseMiddleware<ErrorHandlingMiddleware>();

            if (env.IsDevelopment())
            {
                // app.UseDeveloperExceptionPage();
            }
            else
            {
                // The default HSTS value is
                // 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            // Enable middleware to serve generated Swagger as a JSON endpoint.
            app.UseSwagger();

            // Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.),
            // specifying the Swagger JSON endpoint.
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1");
            });
            app.UseHttpsRedirection();

            app.UseDefaultFiles();
            app.UseStaticFiles();
            app.UseRouting(); // root the request to the
            app.UseCors("CorsPolicy");
            app.UseAuthentication();
            app.UseAuthorization();
            // map controller endpoints to the API
            app.UseEndpoints(
                endpoints =>
                {
                    endpoints.MapControllers();
                    // endpoints.MapHub<NoticationsHub>("/notification");
                    endpoints.MapFallbackToController("Index","FallBack");
                });

            //app.UseSpa(spa =>
            //{
            //    spa.Options.SourcePath = "../client-app";

            //    if (env.IsDevelopment())
            //    {
            //        spa.UseReactDevelopmentServer(npmScript: "start");
            //    }
            //});
        }
    }
}